<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed');

class Cart extends MY_Controller {
    
    public function __construct(){
        parent::__construct();
       
         $this->_user=new User($this->session->userdata('user_id'));
    }
    
    
	function index(){
		
		//Retrieving the posted information by url
    	$type=$this->uri->segment(6);
    	$pid=$this->uri->segment(5);
    	$psize_id=$this->uri->segment(3);
    	$qty=$this->uri->segment(4);
    	
    	//Getting products and size information
    	
    	$product=new Product($pid);
    	
    	$product->file->where_join_field($product,'type',$type);
    	$product->file->where_join_field($product,'default','1')->get();
    	
    	
    	
    	
    	
    	$product->size->include_join_fields()->get_by_id($psize_id);
    	
    	if($qty<=$product->size->join_stock)
    	
    	{
    		$designer=$product->user->first_name.' '.$product->user->last_name;
    		
    		
    	
    	
       		if(isset($product)){
			    $data = array(
               		'id'     => $product->id,
               		'qty'    => $qty,
               		'price'  => $product->price,
               		'name'   => $product->name,
			    	'options'	 => array('size'=>$product->size->name,'image'=>$product->file->filename,'designer'=>$designer,'product_id'=>$product->id,'size_id'=>$product->size->id,'discount'=>0,'actual_price'=>0)
            	);

				$this->cart->insert($data);
				
       		}	
				
				
		}
    	
    	$this->load->view('cart');
    	
    }
    function printcart(){
    	echo "<pre>";
    	
    		print_r($this->_user);
    	
    }
    function shippingadd(){
    	//Retrieving the posted information by url
    	$shipid=$this->uri->segment(3);
    	// $shipid = $i;
    	//Getting products and size information
    	 
    	$shipping=new Shipping($shipid);
    	$this->load->vars(array('shipping'=>$shipping));
    	$this->load->view('shippingcart');
    	 
    }
	function viewCart(){
		foreach ($this->cart->contents() as $items){
			$options=$this->cart->product_options($items['rowid']);
			
			$product=new Product($options['product_id']);
			//var_dump($product->discount->start_date);
			//var_dump($product->id);exit;
		
		}
		$this->load->view('view_cart');
	}
	
	function setQty(){
		
		$psize_id=$this->uri->segment(3);
		$p=new Product($this->uri->segment(4));
		$p->size->where_join_field($p,'size_id',$psize_id);
		$p->size->include_join_fields()->get();
		for ($i=1;$i<=$p->size->join_stock;$i++){
			echo "<option value='$i'>$i</option>";
		}

    }
    
    function deleteItem(){
    	$row_id=$this->uri->segment(3);
	     $data = array(
	               'rowid'  => $row_id,
	               'qty'    => 0
	            );
	
		$this->cart->update($data);
		$this->load->view('cart');
    	
    }
    
    function pmtgateway()
    {
    	//echo "<pre>";
    	$amount = 0;
    	foreach($this->cart->contents() as $cartproduct)
    	{
    		$amount += $cartproduct['subtotal'];
    	}
    	$amount += 10;
    	//echo $amount;die;
    	
    	$gateway = $this->input->post('payment');
    	//echo $gateway;die;
    	if($gateway =='paypal')
    	{
    		
    		$order = new Order();
    		$order->user_id = $this->_user->id;
    		$order->payment = $amount;
    		$order->status = 'Payment Pending';
    		$datestring = "Y-m-d";
    		$time = time();
    		$now = date($datestring, $time);
    		$order->order_date = $now;
    		$order->total_amount = $amount;
    		$order->shipping_amount = 10;
    		$user = new User($this->_user->id);
    		//echo "<pre>";print_r($user->Address);die;
    		$order->shipping_address = $user->Address->address_line1.', '.$user->Address->address_line2.', '.$user->Address->address_line3.' City : '.$user->Address->city.', State :  '.$user->Address->state.', Country : '.$user->Address->country.', Postcode : '.$user->Address->postcode;
    		//create order with payment underprocess status
    		//echo "<pre>";print_r($orderp);die;
    		
    		if($order->save()){
				$oid = $order->id;
				foreach($this->cart->contents() as $cartproduct)
    			{
					$order_product = new Order_product();
					$order_product->order_id = $oid;
					$order_product->product_id = $cartproduct['id'];
					$order_product->quantity = $cartproduct['qty'];
					$order_product->original_value = $cartproduct['price'];
					$order_product->prize = $cartproduct['price'];
					$order_product->size_id = $cartproduct['options']['size_id'];
					$order_product->save();
				}
    			
    		}
    		    		
    		$this->load->library('Paypal');
    		$myPaypal = new Paypal();
    		$myPaypal->addField('business', 'krishn_1309608662_biz@deemtech.com');
    		$myPaypal->addField('currency_code', 'USD');
    		$myPaypal->addField('return', base_url().'/cart/paymentreturn/success/'.$oid);
    		$myPaypal->addField('cancel_return', base_url().'/cart/paymentreturn/failure');
    		$myPaypal->addField('notify_url', 'http://YOUR_HOST/payment/paypal_ipn.php');
    		$myPaypal->addField('amount', $amount);
    		$myPaypal->enableTestMode();
    		$myPaypal->submitPayment();
    	}
    	elseif($gateway =='authorize')
    	{
    		$this->load->vars(array('amount'=>$amount));
    		$this->load->view('authorize');
    	}
    }
    
    function authorize()
    {
    	$amount = 0;
    	foreach($this->cart->contents() as $cartproduct)
    	{
    		$amount += $cartproduct['subtotal'];
    	}
    	$amount += 10;
    	 
    	$this->load->helper(array('form', 'url'));
    	$this->load->library('form_validation');
    	
    	$this->form_validation->set_rules('first_name', 'First Name', 'required');
    	$this->form_validation->set_rules('last_name', 'Last Name', 'required');
    	$this->form_validation->set_rules('address', 'Address', 'required');
    	$this->form_validation->set_rules('state', 'State', 'required');
    	 
    	if ($this->form_validation->run() == FALSE)
    	{
    		
    		$this->load->vars(array('amount'=>$amount));
    		$this->load->view('authorize');
    	}
    	else
    	{
    		$order = new Order();
    		$order->user_id = $this->_user->id;
    		$order->payment = $amount;
    		$order->status = 'Payment Pending';
    		$datestring = "Y-m-d";
    		$time = time();
    		$now = date($datestring, $time);
    		$order->order_date = $now;
    		$order->total_amount = $amount;
    		$order->shipping_amount = 10;
    		$user = new User($this->_user->id);
    		//echo "<pre>";print_r($user->Address);die;
    		$order->shipping_address = $user->Address->address_line1.', '.$user->Address->address_line2.', '.$user->Address->address_line3.' City : '.$user->Address->city.', State :  '.$user->Address->state.', Country : '.$user->Address->country.', Postcode : '.$user->Address->postcode;
    		//create order with payment underprocess status
    		//echo "<pre>";print_r($orderp);die;
    		
    		if($order->save()){
	    		$oid = $order->id;
	    		foreach($this->cart->contents() as $cartproduct)
	    		{
		    		$order_product = new Order_product();
		    		$order_product->order_id = $oid;
		    		$order_product->product_id = $cartproduct['id'];
		    		$order_product->quantity = $cartproduct['qty'];
		    		$order_product->original_value = $cartproduct['price'];
		    		$order_product->prize = $cartproduct['price'];
		    		$order_product->size_id = $cartproduct['options']['size_id'];
		    		$order_product->save();
	    		}
    		 
    		}
    		
	    	//create order with payment underprocess status
	    	$amount = 0;
	    	foreach($this->cart->contents() as $cartproduct)
	    	{
	    		$amount += $cartproduct['subtotal'];
	    	}
	    	$amount += 10;
	    	$post_url = "https://test.authorize.net/gateway/transact.dll";
	    	$post_values = array(
	    		"x_login"			=> "8H5wF4qTE4",
	    		"x_tran_key"		=> "3WxJ93qU9yfv6x3X",
	    	
	    		"x_version"			=> "3.1",
	    		"x_delim_data"		=> "TRUE",
	    		"x_delim_char"		=> "|",
	    		"x_relay_response"	=> "FALSE",
	    	
	    		"x_type"			=> "AUTH_CAPTURE",
	    		"x_method"			=> "CC",
	    		"x_card_num"		=> $this->input->post('card_no'),
	    		"x_exp_date"		=> $this->input->post('exp_date'),
	    	
	    		"x_amount"			=> $amount,
	    		"x_description"		=> "Test Transaction",
	    	
	    		"x_first_name"		=> $this->input->post('first_name'),
	    		"x_last_name"		=> $this->input->post('last_name'),
	    		"x_address"			=> $this->input->post('address'),
	    		"x_state"			=> $this->input->post('state'),
	    		"x_zip"				=> $this->input->post('zip'),
	    	);
	    	
	    	$post_string = "";
	    	foreach( $post_values as $key => $value )
	    	{
	    		$post_string .= "$key=" . urlencode( $value ) . "&";
	    	}
	    	$post_string = rtrim( $post_string, "& " );
	    	$request = curl_init($post_url); // initiate curl object
	    	curl_setopt($request, CURLOPT_HEADER, 0); // set to 0 to eliminate header info from response
	    	curl_setopt($request, CURLOPT_RETURNTRANSFER, 1); // Returns response data instead of TRUE(1)
	    	curl_setopt($request, CURLOPT_POSTFIELDS, $post_string); // use HTTP POST to send form data
	    	curl_setopt($request, CURLOPT_SSL_VERIFYPEER, FALSE); // uncomment this line if you get no gateway response.
	    	$post_response = curl_exec($request); // execute curl post and store results in $post_response
	    	curl_close ($request); // close curl object
	    	
	    	$response_array = explode($post_values["x_delim_char"],$post_response);
	    	if($response_array[6]==0){
	    		$error = $response_array[3];
	    		$this->load->vars(array('payment_error'=>$error,'amount'=>$amount));
    			$this->load->view('authorize');
    		//payment unsuccessful code
    		}else{
	    		$this->paymentreturn('success',$oid);
	    	}
    	}
    }
    
    function paymentreturn($ack,$test)
    {
    	if($ack == 'success')
    	{
    		$order = new Order($test);
    		$order->product->include_join_fields()->get();
    		
    		foreach($this->cart->contents() as $cartproduct)
    		{
    			$row_id= $cartproduct['rowid'];
    			//echo $row_id;die;
    			$data = array(
    						'rowid'  => $row_id,
    				        'qty'    => 0
    				);
    			$this->cart->update($data);
    		}
    		
    		foreach($order->product->all as $prod){
    			$product=new Product($prod->id);
    			$product->size->include_join_fields()->get_by_id($prod->join_size_id);
    			
    			$prod_size = new Product_size($product->size->join_id);
    			$prod_size->stock = $prod_size->stock - $prod->join_quantity ;
    			$prod_size->save();
    			
    			$user=new User($this->session->userdata('user_id'));
    			$user->reward_points +=$product->points_you_get;
    			$user->save();
    		}
    		
    		$order->status = 'Payment Successful';
    		$order->save();
    		$this->load->vars(array('order'=>$order));
    		$this->load->view('payment_status');
    		//payment successful code
    		//update order status and update avialable product quantity
    	}
    	elseif($ack == 'failure')
    	{
    		$order = new Order($test);
    		$order->status = 'Payment failed';
    		$order->save();
    		$this->load->vars(array('order'=>$order));
    		$this->load->view('payment_failure');
    		//echo "fail";
    	}
    	
    }
    
    function updateOrder(){
    	$qty=$this->input->post('qty');
    	
    	if(is_array($qty)){
    		foreach($qty as $rowid=>$value){
    			$items=$this->cart->product_options($rowid);
    			
    			$product=new Product($items['product_id']);
    			$product->size->include_join_fields()->get_by_id($items['size_id']);
    			if($value<=$product->size->join_stock){
	    			$data = array(
				               'rowid'  => $rowid,
				               'qty'    => $value
				            );
				            
				            
    			
	    		/*if (isset($this->input->post('coupon_code'))){
	    			$coupon=new Coupon();
	    			$coupon->where('code',$this->input->post('coupon_code'))->get();
	    			
	    			$product->coupon->where('id',$coupon->id);
           			$product->coupon->include_join_fields()->get();
           			foreach ($product->coupon as $pcpn){
           				$pcpn_id[]=$pcpn->id;
           			}
           			if(in_array($coupon->id, $pcpn_id)){
	           			if ($coupon->type=='Fixed'){
		    				$discount=$coupon->discount;
		    			}
		    			elseif ($coupon->type=='Percentage'){
		    				$discount=$coupon->discount;
		    			}
           			}
	    			
	    			
	    		}
				*/
					$this->cart->update($data);	
    			}
    			else {
    				$error="Error: There is not enough stock for this category.";
    				$this->load->vars(array('update_error'=>$error));
    			}
    		}
    	}
    	
		$this->load->view('view_cart');
    }
    
	function deleteItemCartPage(){
    	$row_id=$this->uri->segment(3);
	     $data = array(
	               'rowid'  => $row_id,
	               'qty'    => 0
	            );
	
		$this->cart->update($data);
		$this->viewCart();
    	
    }
    
    function checkout()
    {
    	if($this->session->userdata('login')===true){
    		$u=new User($this->session->userdata('user_id'));
    		if(!$u->isCustomer()){
    			$this->load->vars(array('login_error'=>TRUE));
    			redirect('login','refresh');
    		}
    	}  else {
    		redirect('login','refresh');
    	}
    	
    	$user_id=$this->session->userdata('user_id');
    	$user=new User($user_id);
    	$user->address->where_join_field($user,'type','shipping');
    	$user->address->include_join_fields()->get();
    	
    	$buser=new User($user_id);
    	$buser->address->where_join_field($user,'type','billing');
    	$buser->address->include_join_fields()->get();
    	
    	$shipping = new Shipping();
    	$shipping->get();
    	
    	$this->load->vars(array('user'=>$user, 'buser'=>$buser,'shipping'=>$shipping));
    	$this->load->view('checkout');
    }
    function processorder()
    {
    	$test = $this->input->post();
    	$expdate = $test['ccard']['month'].$test['ccard']['year'];
    	//echo "<pre>"; print_r($test);die;
    	$shippingadd = $test['data']['shipping'];
    	if ($test['group1']=='same')
    		$billingadd = $shippingadd;
    	else
    		$billingadd = $test['data']['billing'];
    	
    	$shipmethod = new Shipping($test['shipmethod']);
    	//echo "<pre>";print_r($shipmethod);die;
    	
    	$amount = 0;
    	foreach($this->cart->contents() as $cartproduct)
    	{
    		$amount += $cartproduct['subtotal'];
    	}
    	$amount += $shipmethod->price;
    	//echo "<pre>";print_r($test);die;
    	
    	//echo 'test';die;
    	$order = new Order();
    	$order->user_id = $this->_user->id;
    	$order->payment = $amount;
    	$order->status = 'Payment Pending';
    	$datestring = "Y-m-d";
    	$time = time();
    	$now = date($datestring, $time);
    	$order->order_date = $now;
    	$order->total_amount = $amount;
    	$order->shipping_amount = $shipmethod->price;
    	$user = new User($this->_user->id);
    	
    	$add=new Ordaddress();
    	$add->address_line1=$shippingadd["address_line1"];
    	$add->address_line2=$shippingadd["address_line2"];
    	$add->address_line3=$shippingadd["address_line3"];
    	$add->city=$shippingadd["city"];
    	$add->state=$shippingadd["state"];
    	$add->country=$shippingadd["country"];
    	$add->postcode=$shippingadd["postcode"];
    	$add->first_name=$shippingadd["first_name"];
    	$add->last_name=$shippingadd["last_name"];
    	$add->type="shipping";
    	$add->save();
    	
    	$add1=new Ordaddress();
    	$add1->address_line1=$billingadd["address_line1"];
    	$add1->address_line2=$billingadd["address_line2"];
    	$add1->address_line3=$billingadd["address_line3"];
    	$add1->city=$billingadd["city"];
    	$add1->state=$billingadd["state"];
    	$add1->country=$billingadd["country"];
    	$add1->postcode=$billingadd["postcode"];
    	$add1->first_name=$billingadd["first_name"];
    	$add1->last_name=$billingadd["last_name"];
    	$add1->type="billing";
    	$add1->save();
    	//echo "<pre>";print_r($user->Address);die;
    	//$order->shipping_address = $user->Address->address_line1.', '.$user->Address->address_line2.', '.$user->Address->address_line3.' City : '.$user->Address->city.', State :  '.$user->Address->state.', Country : '.$user->Address->country.', Postcode : '.$user->Address->postcode;
    	//create order with payment underprocess status
    	//echo "<pre>";print_r($orderp);die;
    	if($order->save()){
    	
	    	$order->save($add);
	    	$order->save($add1);
	    	$oid = $order->id;
	    	foreach($this->cart->contents() as $cartproduct)
	    	{
	    		$order_product = new Order_product();
	    		$order_product->order_id = $oid;
	    		$order_product->product_id = $cartproduct['id'];
	    		$order_product->quantity = $cartproduct['qty'];
	    		$order_product->original_value = $cartproduct['price'];
	    		$order_product->prize = $cartproduct['price'];
	    		$order_product->size_id = $cartproduct['options']['size_id'];
	    		$order_product->save();
	    	}
    		 
    	}
    	
    	if($test['pmtmethod']=='opt2')
    	{
    		//echo "paypal ";die;
    		$this->load->library('Paypal');
    		$myPaypal = new Paypal();
    		$myPaypal->addField('business', 'krishn_1309608662_biz@deemtech.com');
    		$myPaypal->addField('currency_code', 'USD');
    		$myPaypal->addField('return', base_url().'/cart/paymentreturn/success/'.$oid);
    		$myPaypal->addField('cancel_return', base_url().'/cart/paymentreturn/failure/'.$oid);
    		$myPaypal->addField('notify_url', 'http://YOUR_HOST/payment/paypal_ipn.php');
    		    		$myPaypal->addField('amount', $amount);
    		$myPaypal->enableTestMode();
    		    		$myPaypal->submitPayment();
    		
    	}
    	else 
    	{
    		//echo "test";die;
    		$post_url = "https://test.authorize.net/gateway/transact.dll";
    		$post_values = array(
    			    		"x_login"			=> "8H5wF4qTE4",
    			    		"x_tran_key"		=> "3WxJ93qU9yfv6x3X",
    		
    			    		"x_version"			=> "3.1",
    			    		"x_delim_data"		=> "TRUE",
    			    		"x_delim_char"		=> "|",
    			    		"x_relay_response"	=> "FALSE",
    		
    			    		"x_type"			=> "AUTH_CAPTURE",
    			    		"x_method"			=> "CC",
    			    		"x_card_num"		=> $test['ccard']['ccno'],
    			    		"x_exp_date"		=> $expdate,
    		
    			    		"x_amount"			=> $amount,
    			    		"x_description"		=> "Test Transaction",
    		
    			    		"x_first_name"		=> $billingadd['first_name'],
    			    		"x_last_name"		=> $billingadd['last_name'],
    			    		//"x_address"			=> $this->input->post('address'),
    			    		"x_state"			=> $billingadd['state'],
    			    		"x_zip"				=> $billingadd['postcode'],
    		);
    		
    		$post_string = "";
    		foreach( $post_values as $key => $value )
    		{
    			$post_string .= "$key=" . urlencode( $value ) . "&";
    		}
    		$post_string = rtrim( $post_string, "& " );
    		$request = curl_init($post_url); // initiate curl object
    		curl_setopt($request, CURLOPT_HEADER, 0); // set to 0 to eliminate header info from response
    		curl_setopt($request, CURLOPT_RETURNTRANSFER, 1); // Returns response data instead of TRUE(1)
    		curl_setopt($request, CURLOPT_POSTFIELDS, $post_string); // use HTTP POST to send form data
    		curl_setopt($request, CURLOPT_SSL_VERIFYPEER, FALSE); // uncomment this line if you get no gateway response.
    		$post_response = curl_exec($request); // execute curl post and store results in $post_response
    		curl_close ($request); // close curl object
    		
    		$response_array = explode($post_values["x_delim_char"],$post_response);
    		if($response_array[6]==0){
    			$this->paymentreturn('failure',$oid);
    			//payment unsuccessful code
    		}else{
    			$this->paymentreturn('success',$oid);
    		}
    	}
    	
    }
    
    function checkLogin(){
    	$this->load->vars(array('not_login'=>TRUE));
  			
        $this->load->view('user/login_register');
    }
    
    function ManageCoupon(){
    	foreach($this->cart->contents() as $cartproduct)
    	{
    		$row_id= $cartproduct['rowid'];     
	        $amount= $cartproduct['subtotal'];
	        $discount=0;
	        $actual_amount=0;
	        $time=time();
	    	//if (isset($this->input->post('coupon_code'))){
	    		$coupon=new Coupon();
	    		$coupon->where('code',$this->input->post('coupon_code'))->get();
	    		
	    		$product->coupon->where('id',$coupon->id);
	           	$product->coupon->include_join_fields()->get();
	           	
	           	foreach ($product->coupon as $pcpn){
	           		$pcpn_id[]=$pcpn->id;
	           	}
	           	
	          	if(in_array($coupon->id, $pcpn_id)){
	           		if ($coupon->total_amount <= $amount && $coupon->end_date >= $time && $coupon->start_date <= $time){
		           		if ($coupon->type=='Fixed'){
		    				$discount +=$coupon->discount;
		    				$actual_amount +=$amount-$coupon->discount;
		    				
		    				$data = array(
					               'rowid'  => $row_id,
					               'options' => array('discount'=> $coupon->discount,'actual_price'=>$amount-$coupon->discount)
	           					 );
		    			}
		    			elseif ($coupon->type=='Percentage'){
		    				$discount +=(int($amount)*int($coupon->discount))/100;
		    				$actual_amount +=$amount-(int($amount)*int($coupon->discount))/100;
		    				
		    				$data = array(
					               'rowid'  => $row_id,
					               'options' => array('discount'=> (int($amount)*int($coupon->discount))/100,'actual_price'=>$amount-(int($amount)*int($coupon->discount))/100)
					            );
		    			}
	           		}
	           		else {
	           			$coupon_error="Error: This coupon is not valid or expired.";
    					$this->load->vars(array('coupon_error'=>$coupon_error));
	           		}
	           	}
	           	
	           	
	    		
	    		
	    	//}
	    	
		
			$this->cart->update($data);	
    	}
    }
    
}
    

